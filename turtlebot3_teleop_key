#!/usr/bin/env python

# Copyright (c) 2020, Yanbo Wang,Haolun Shan,Zechuan Duan KCL.
import time
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import Illuminance
from sensor_msgs.msg import LaserScan
import sys, select, os

if os.name == 'nt':
    import msvcrt
else:
    import tty, termios

preTime = 0
left = 0  # Left  Light Senor value
right = 0  # Right Light Senor value
grey = False
white = True
map = [white,grey,white,white,grey,white,white,white,grey,grey]
print(len(map))
e = """
Communications Failed
"""


# Get Right Light Sensor value
def callbackone(data):
    global right
    right = data.illuminance


# Get Right Light Sensor value
def callbacktwo(data):
    global left
    left = data.illuminance


# Get Laser Scan value
def callLaser(data):
    global distance
    distance = data.ranges

def moveFront(twist,pub):
    print("movefront")
    twist.linear.x = target_linear_vel;
    twist.linear.y = 0.0;
    twist.linear.z = 0.0
    twist.angular.x = 0.0;
    twist.angular.y = 0.0;
    twist.angular.z = 0;

    pub.publish(twist)
    rospy.sleep(9.3)

    twist.linear.x = 0;
    twist.linear.y = 0.0;
    twist.linear.z = 0.0
    twist.angular.x = 0.0;
    twist.angular.y = 0.0;
    twist.angular.z = 0;

    pub.publish(twist)


def moveBack(twist, pub):
    twist.linear.x = -target_linear_vel;
    twist.linear.y = 0.0;
    twist.linear.z = 0.0
    twist.angular.x = 0.0;
    twist.angular.y = 0.0;
    twist.angular.z = 0;

    pub.publish(twist)
    rospy.sleep(9.3)

    twist.linear.x = 0;
    twist.linear.y = 0.0;
    twist.linear.z = 0.0
    twist.angular.x = 0.0;
    twist.angular.y = 0.0;
    twist.angular.z = 0;

    pub.publish(twist)


def moveRight(twist, pub):
    twist.linear.x = 0;
    twist.linear.y = 0.0;
    twist.linear.z = 0.0
    twist.angular.x = 0.0;
    twist.angular.y = 0.0;
    twist.angular.z = 0.075;

    pub.publish(twist)
    rospy.sleep(10)

    twist.linear.x = 0;
    twist.linear.y = 0.0;
    twist.linear.z = 0.0
    twist.angular.x = 0.0;
    twist.angular.y = 0.0;
    twist.angular.z = 0;

    pub.publish(twist)
def moveleft(twist, pub):
    twist.linear.x = 0;
    twist.linear.y = 0.0;
    twist.linear.z = 0.0
    twist.angular.x = 0;
    twist.angular.y = 0.0;
    twist.angular.z = -0.075;

    pub.publish(twist)
    rospy.sleep(10)

    twist.linear.x = 0;
    twist.linear.y = 0.0;
    twist.linear.z = 0.0
    twist.angular.x = 0.0;
    twist.angular.y = 0.0;
    twist.angular.z = 0.0;



    pub.publish(twist)

# Main function, include line follow and avoid obstacle
if __name__ == "__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('topic_subscriber')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
    lognow = []
    target_linear_vel = 0.01
    Kp = 0.002  # Kp of Line Follow
    Kd = 0.00009  # Kd of Line Follow
    Tp = 0.07  # Initial line velocity
    prevErr = 0  # Previous Error
    pretime = 0
    isObstacle = False  # Whether start avoiding obstacle
    start = False  # Whether leave line and avoid obstacle
    sensorWork = 0.9
    twist = Twist()
    moveFront(twist, pub)
    try:
        # Main loop
        while(1):
            # Subscribe sensors
            sub = rospy.Subscriber('/light_sensor_plugin/lightSensor', Illuminance, callbackone)
            sub2 = rospy.Subscriber('/light_sensor_plugin/leftLightSensor', Illuminance, callbacktwo)
            sub4 = rospy.Subscriber("/scan", LaserScan, callLaser)
            # 137min 163max(grey)             228min 246max(white)

            # Give a initial linear velocity and angular velocity
            print(left)
            if(137<=left and left <=163):              #grey
                lognow.append(grey)
                print("grey")

            elif (228 <= left and left <=246):  # grey
                lognow.append(white)
                print("white")
            else:
                print("car die")
                print(left)
                continue

            maploc = [0,0,0,0,0,0,0,0,0,0]

            msize = len(map)-1

            success = 2
            successnow = True
            sucposition = 0
            for i in range(0,msize):
                for y in range(0,len(lognow)-1):
                    if(map[i+y] == lognow[y]):
                        successnow = True
                    else:
                        successnow = False
                if(successnow == False):
                    successnow = True
                elif (successnow == True):
                    pos = i+len(lognow)
                    maploc[pos] = 1
                    supposition = pos
                    success  = success + 1

            if(success==1) :
                print('we are in the position'+sucposition)
                break
            else:
                print("probability:")
                for i in maploc:
                   print (i/success)
                   print(' ')

                twist = Twist()
                moveFront(twist, pub)
            #print(preTime)
            #print(rospy.Time.now())
           # publish the angular velocity and linear velocity of the waffle-pi
            #137min 163max(grey)             228min 246max(white)

    except:
        print(e)

    finally:
        twist = Twist()
        twist.linear.x = 0.0;
        twist.linear.y = 0.0;
        twist.linear.z = 0.0
        twist.angular.x = 0.0;
        twist.angular.y = 0.0;
        twist.angular.z = 0.0
        pub.publish(twist)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)