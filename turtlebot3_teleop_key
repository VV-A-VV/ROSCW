#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import Illuminance
import sys, select, os

import time

# import simple_pid
# from simple_pid import PID

if os.name == 'nt':
    import msvcrt
else:
    import tty, termios

BURGER_MAX_LIN_VEL = 0.22
BURGER_MAX_ANG_VEL = 2.84

WAFFLE_MAX_LIN_VEL = 0.18
WAFFLE_MAX_ANG_VEL = 100

LIN_VEL_STEP_SIZE = 0.08
ANG_VEL_STEP_SIZE = 0.08

left = 0
right = 0
READ_TIME = 0

msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x
w/x : increase/decrease linear velocity (Burger : ~ 0.22, Waffle and Waffle Pi : ~ 0.26)
a/d : increase/decrease angular velocity (Burger : ~ 2.84, Waffle and Waffle Pi : ~ 1.82)
space key, s : force stop
CTRL-C to quit
"""

e = """
Communications Failed
"""


def getKey():
    if os.name == 'nt':
        return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key


def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel, target_angular_vel)


def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min(input, output + slop)
    elif input < output:
        output = max(input, output - slop)
    else:
        output = input

    return output


def constrain(input, low, high):
    if input < low:
        input = low
    elif input > high:
        input = high
    else:
        input = input

    return input


def checkLinearLimitVelocity(vel):
    if turtlebot3_model == "burger":
        vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
        vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    else:
        vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)

    return vel


a = 0


def checkAngularLimitVelocity(vel):
    if turtlebot3_model == "burger":
        vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
        vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    else:
        vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    return vel


def biggerZero(data):
    if data < 0:
        return 0
    return data


def callbackone(data):
    global right
    right = data.illuminance


def callbacktwo(data):
    global left
    left = data.illuminance


if __name__ == "__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('topic_subscriber')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)

    turtlebot3_model = rospy.get_param("model", "burger")

    status = 0
    target_linear_vel = 0.0
    target_angular_vel = 0.0
    control_linear_vel = 0.0
    control_angular_vel = 0.0

    Kp = 0.0013
    Kd = 0.00015

    Kl = 0.0003
    preError = 0
    dt = 0.01

    try:
        print(msg)
        while (1):
            sub = rospy.Subscriber('/light_sensor_plugin/lightSensor', Illuminance, callbackone)
            sub2 = rospy.Subscriber('/light_sensor_plugin/leftLightSensor', Illuminance, callbacktwo)

            error = right - left

            print(right)
            print(left)

            dao = True

            if (right < left):

                if left == 201.0:
                    error = -130

                target_linear_vel = biggerZero(130 + error) * Kl + 0.0005

                derivative = (error - preError) / dt
                target_angular_vel = checkAngularLimitVelocity(error * Kp + Kd * derivative)

                print("turn Right !!! W-_-W")
                print("error:", error)
                print("PreError:", preError)

                preError = error

                print("---------------------------------------------")
                print("Targrt Angle velocity:", target_angular_vel)
                print("Targrt Line velocity:", target_linear_vel)
                print("----------------------------------------------")
                print("Current Angle velocity:", control_angular_vel)
                print("Currert Line velocity:", control_linear_vel)
                print("----------------------------------------------")

            elif (left == 201.0 and right == 201.0):
                # target_linear_vel = -0.1
                # target_angular_vel = 0.0
                if control_linear_vel >= 0:
                    target_linear_vel = checkLinearLimitVelocity(target_linear_vel - 0.003)
                else:
                    target_linear_vel = - 0.003

                target_angular_vel = 0.0

                # dao = False
                #
                # error = preError
                # target_linear_vel = 0.05
                #
                # derivative = (error - preError) / dt
                #
                # target_angular_vel = checkAngularLimitVelocity(error * Kp)

                print("DaoChe")
                print("error:", error)
                print("PreError:", preError)
                print("---------------------------------------------")
                print("Targrt Angle velocity:", target_angular_vel)
                print("Targrt Line velocity:", target_linear_vel)
                print("----------------------------------------------")
                print("Current Angle velocity:", control_angular_vel)
                print("Currert Line velocity:", control_linear_vel)
                print("----------------------------------------------")

            elif (left < right):

                if right == 201.0:
                    error = 130

                target_linear_vel = biggerZero(130 - error) * Kl + 0.0005

                derivative = (error - preError) / dt
                target_angular_vel = checkAngularLimitVelocity(error * Kp + Kd * derivative)


                print("turn left !!! //A_A//")
                print("error:", error)
                print("PreError:", preError)

                preError = error

                print("---------------------------------------------")
                print("Targrt Angle velocity:", target_angular_vel)
                print("Targrt Line velocity:", target_linear_vel)
                print("----------------------------------------------")
                print("Current Angle velocity:", control_angular_vel)
                print("Currert Line velocity:", control_linear_vel)
                print("----------------------------------------------")
            elif (left == right):
                # # target_linear_vel = 0.5
                # # target_angular_vel = 0.0
                # if preError == 0:
                #     target_angular_vel = 0
                # else:
                #     target_angular_vel = - control_angular_vel
                #
                # target_linear_vel = checkLinearLimitVelocity(0.05)
                # target_angular_vel = 0.0
                target_linear_vel = 130 * Kl + 0.0005

                print("perfect !!!")
                preError = error

            key = getKey()
            if key == 'w':
                sub = rospy.Subscriber('/light_sensor_plugin/lightSensor', Illuminance, callbackone)

                sub2 = rospy.Subscriber('/light_sensor_plugin/leftLightSensor', Illuminance, callbacktwo)

                target_linear_vel = checkLinearLimitVelocity(target_linear_vel + LIN_VEL_STEP_SIZE)
                status = status + 1
                print("--------------------------------------------------------------------------------------")
                print(right)
                print(left)
                print("--------------------------------------------------------------------------------------")
                print(vels(target_linear_vel, target_angular_vel))
            elif key == 'x':
                target_linear_vel = checkLinearLimitVelocity(target_linear_vel - LIN_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel, target_angular_vel))
            elif key == 'a':
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel, target_angular_vel))
            elif key == 'd':
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel, target_angular_vel))
            elif key == ' ' or key == 's':
                target_linear_vel = 0.0
                control_linear_vel = 0.0
                target_angular_vel = 0.0
                control_angular_vel = 0.0
                print(vels(target_linear_vel, target_angular_vel))
            else:
                if (key == '\x03'):
                    break

            if status == 20:
                print(msg)
                status = 0

            twist = Twist()

            # control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE / 2.0))
            control_linear_vel = target_linear_vel
            twist.linear.x = control_linear_vel;
            twist.linear.y = 0.0;
            twist.linear.z = 0.0

            # control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE / 2.0))
            control_angular_vel = target_angular_vel
            twist.angular.x = 0.0;
            twist.angular.y = 0.0;
            twist.angular.z = control_angular_vel

            pub.publish(twist)

            time.sleep(dt)



    except:
        print(e)

    finally:
        twist = Twist()
        twist.linear.x = 0.0;
        twist.linear.y = 0.0;
        twist.linear.z = 0.0
        twist.angular.x = 0.0;
        twist.angular.y = 0.0;
        twist.angular.z = 0.0
        pub.publish(twist)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
