#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import Illuminance
from sensor_msgs.msg import LaserScan
import sys, select, os
if os.name == 'nt':
  import msvcrt
else:
  import tty, termios




left =0
right =0
e = """
Communications Failed
"""

def callbackone(data):
    global right
    right = data.illuminance



def callbacktwo(data):
    global left
    left = data.illuminance

    # print("rest:", orientation_list, yaw_deg)
def callLaser(data):
    global distance
    distance = data.ranges
    # print(len(data.ranges))


if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('topic_subscriber')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
    stepDegree = 360

    status = 0
    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0
    twist = Twist()

    # control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE/2.0))
    control_linear_vel = 0.0
    twist.linear.x = control_linear_vel;
    twist.linear.y = 0.0;
    twist.linear.z = 0.0

    # control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
    control_angular_vel = 0.0
    twist.angular.x = 0.0;
    twist.angular.y = 0.0;
    twist.angular.z = control_angular_vel
    distance = []
    pub.publish(twist)
    # time.sleep(0.1)

    Kp = 0.002
    Kd = 0.00009
    Tp = 0.07
    prevErr = 0
    derivative = 0
    desAngPos = 0
    timep =0
    isObstacle = False
    try:
       # print(msg)
        while(1):
            sub = rospy.Subscriber('/light_sensor_plugin/lightSensor', Illuminance, callbackone)
            sub2 = rospy.Subscriber('/light_sensor_plugin/leftLightSensor', Illuminance, callbacktwo)
            sub4 = rospy.Subscriber("/scan", LaserScan, callLaser)
            target_linear_vel = Tp
            if(len(distance) == 360):
                minx = min(distance)
                miny = distance.index(minx)
                if(minx > 0.2 and minx < 0.5 and ((miny > 0 and miny < 45) or (miny > 315 and miny < 360))):

                   isObstacle = True

            if(isObstacle):

                x = min(distance)
                y = distance.index(x)

                print(x)
                if (y< 180):
                 #   print("==============================================")
                  #  print(y)
                    if (y<100):
                      #  print("less than 90")
                        target_angular_vel = 0.2
                        target_linear_vel = 0
                    elif (y >120 ):
                       # print("larger than 90")
                        target_angular_vel = -0.2
                        target_linear_vel = 0

                    else :
                        if(x > 0.3):
                          target_angular_vel = x
                          target_linear_vel = 0.05
                        if(x < 0.25):
                          target_angular_vel = -x
                          target_linear_vel = 0.05
                else:
                  #  print("==============================================")

                    if(left == 201.0 and right == 201.0):
                        Error = y - 280
                        target_angular_vel = Error * 0.01
                        if (y < 280):
                            target_linear_vel = 0
                        elif(y > 300):
                            target_linear_vel = 0
                        else:

                            if (x > 0.3):
                                target_linear_vel = 0.05
                            if (x < 0.25):
                                target_linear_vel = 0.05
                    elif(left == 201.0 or right == 201.0):
                        Error = y - 240
                        target_angular_vel = Error * 0.001
                        if (y < 250):
                            target_linear_vel = 0
                        elif (y > 270):
                            target_linear_vel = 0
                        else:

                            if (x > 0.3):
                                target_linear_vel = 0.01
                            if (x < 0.25):
                                target_linear_vel = 0.01


               # print(left)
              #  print(right)

                if (left != 201.0 and right != 201.0):
                    # if(50<y<130 and x<0.4):
                    #     target_angular_vel = -2
                    #     print("aaa")
                    #     twist = Twist()
                    #     twist.linear.x = 0.1;
                    #     twist.linear.y = 0.0;
                    #     twist.linear.z = 0.0
                    #     twist.angular.x = 0.0;
                    #     twist.angular.y = 0.0;
                    #     twist.angular.z = target_angular_vel
                    #     pub.publish(twist)
                    #     rospy.sleep(0.5)
                    # elif (230 < y < 310 and x < 0.4):
                    #     target_angular_vel = 2
                    #     print("bbb")
                    #     twist = Twist()
                    #     twist.linear.x = 0.1;
                    #     twist.linear.y = 0.0;
                    #     twist.linear.z = 0.0
                    #     twist.angular.x = 0.0;
                    #     twist.angular.y = 0.0;
                    #     twist.angular.z = target_angular_vel
                    #     pub.publish(twist)
                    #     rospy.sleep(0.5)

                    #print(left)
                    #print(right)
                    isObstacle = False
               # print(newDistance)
            else:
                if(right < left-20):

                    target_linear_vel = 0.015
                    # target_angular_vel = -0.2
                    # print( target_angular_vel , phi)
                    # print(pose_x, pose_y, yaw_deg)
                   # print("turn Right !!! W-_-W")
                elif(left == 201.0 and  right == 201.0):
                    target_linear_vel = -Tp
                    # print(pose_x, pose_y, yaw_deg)
                  #  print("DaoChe")
                elif(left < right-20):

                    target_linear_vel = 0.015

                    # target_angular_vel = 0.2
                    # print( target_angular_vel , phi)
                    # print(pose_x, pose_y, yaw_deg)
                    #print("turn left !!! //A_A//")
                # elif(left == right):
                #     target_linear_vel = Tp
                #     target_angular_vel = 0.0
                #     # print(pose_x, pose_y, yaw_deg)
                #
                #     print("perfect !!!")
                error = right - left

                dt = 0.2
                derivative = error - prevErr

                #print (derivative)

                target_angular_vel = Kp*error + Kd*derivative

                # print(target_angular_vel)
                # print(Kd*derivative)
                # print(left)
                # print(right)
                # print("-----------------------------------------------------------------")
                # print(target_angular_vel,Kp*error, Kd*derivative)
                prevErr = error
            twist = Twist()
            twist.linear.x = target_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = target_angular_vel

            pub.publish(twist)
            rospy.sleep(0.14)



    except:
        print(e)

    finally:
        twist = Twist()
        twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
        twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
        pub.publish(twist)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)