#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
import time
import math
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import Illuminance
from sensor_msgs.msg import LaserScan
import sys, select, os

if os.name == 'nt':
    import msvcrt
else:
    import tty, termios

left = 0
right = 0
pose_x = 0
pose_y = 0
phi = 0
READ_TIME = 0
isObstacle = False
msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x
w/x : increase/decrease linear velocity (Burger : ~ 0.22, Waffle and Waffle Pi : ~ 0.26)
a/d : increase/decrease angular velocity (Burger : ~ 2.84, Waffle and Waffle Pi : ~ 1.82)
space key, s : force stop
CTRL-C to quit
"""

e = """
Communications Failed
"""


def getKey():
    if os.name == 'nt':
        return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key


def callbackone(data):
    global right
    right = data.illuminance


def biggerZero(data):
    if data < 0:
        return 0
    return data


def callbacktwo(data):
    global left
    left = data.illuminance


def callback_update_position(data):
    global pose_x
    global pose_y
    global phi
    pose_x = round(data.pose.pose.position.x, 4)
    pose_y = round(data.pose.pose.position.y, 4)
    quaternion = data.pose.pose.orientation
    orientation_list = [quaternion.x, quaternion.y, quaternion.z, quaternion.w]
    (roll, pitch, yaw) = euler_from_quaternion(orientation_list)
    phi = yaw
    # yaw_deg = round(math.degrees(yaw), 4)
    # print("WEIZHI:",pose_x,pose_y)

    # print("rest:", orientation_list, yaw_deg)


def callLaser(data):
    global distance
    distance = data.ranges
    # print(len(data.ranges))


if __name__ == "__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('topic_subscriber')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
    Kp = 5
    stepDegree = 360
    turtlebot3_model = rospy.get_param("model", "burger")

    status = 0
    target_linear_vel = 0.0
    target_angular_vel = 0.0
    control_linear_vel = 0.0
    control_angular_vel = 0.0
    twist = Twist()

    # control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE/2.0))
    control_linear_vel = 0.0
    twist.linear.x = control_linear_vel;
    twist.linear.y = 0.0;
    twist.linear.z = 0.0

    # control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
    control_angular_vel = 0.0
    twist.angular.x = 0.0;
    twist.angular.y = 0.0;
    twist.angular.z = control_angular_vel
    distance = []
    pub.publish(twist)
    # time.sleep(0.1)

    Kp = 0.0013
    Kd = 0.0002
    Ki = 0.0001

    Kp_R = 0.00013
    Kd_R = 0.00002
    Ki_R = 0.00001

    Kl = 0.0003

    integral = 0

    dt = 0.01

    preError = 0
    derivative = 0
    desAngPos = 0

    error_Rote = 0
    preError_Rote = 0

    isObstacle = False

    try:
        print(msg)
        while (1):
            sub = rospy.Subscriber('/light_sensor_plugin/lightSensor', Illuminance, callbackone)
            sub2 = rospy.Subscriber('/light_sensor_plugin/leftLightSensor', Illuminance, callbacktwo)
            sub3 = rospy.Subscriber("odom", Odometry, callback_update_position)
            sub4 = rospy.Subscriber("/scan", LaserScan, callLaser)

            newDistance = []
            # isObstacle = False
            if (len(distance) == 360):
                for i in range(0, 360):
                    if (distance[i] > 0.2 and distance[i] < 0.5 and ((i > 0 and i < 45) or (i > 315 and i < 360))):
                        isObstacle = True
                    if (distance[i] < 0.2 or distance[i] == "inf"):
                        newDistance.append(999)
                    else:
                        newDistance.append(distance[i])

            if (isObstacle):
                if (left != 201.0 and right != 201.0):
                    isObstacle = False
                if (newDistance.index(min(newDistance)) > 180):
                    error_Rote = 180 - newDistance.index(min(newDistance))
                    derivative_R = (error_Rote - preError_Rote) / dt
                    integral_R = integral + error_Rote * dt
                    target_angular_vel = error_Rote * Kp_R + Kd_R * derivative_R + Ki_R * integral_R

                    # turn left
                    target_linear_vel = 0.01

                    print("Wprking______________________________________")
                    print(target_angular_vel)

                else:

                    error_Rote = newDistance.index(min(newDistance)) - 180
                    derivative_R = (error_Rote - preError_Rote) / dt
                    integral_R = integral + error_Rote * dt
                    target_angular_vel = error_Rote * Kp_R + Kd_R * derivative_R + Ki_R * integral_R

                    target_linear_vel = 0.01
                    print("Wprking______________________________________")
                    print(target_angular_vel)


            # print(newDistance)
            else:

                error = right - left

                if (right < left):

                    if left == 201.0:
                        error = -130

                    target_linear_vel = biggerZero(130 + error) * Kl + 0.0005

                    derivative = (error - preError) / dt
                    integral = integral + error * dt

                    target_angular_vel = error * Kp + Kd * derivative + Ki * integral

                    preError = error

                    print("turn Right !!! W-_-W")
                elif (left == 201.0 and right == 201.0):

                    if control_linear_vel >= 0:
                        target_linear_vel = target_linear_vel - 0.003
                    else:
                        target_linear_vel = - 0.01

                    target_angular_vel = 0.0

                    print("DaoChe")
                elif (left < right):

                    if right == 201.0:
                        error = 130

                    target_linear_vel = biggerZero(130 - error) * Kl + 0.0005

                    derivative = (error - preError) / dt
                    integral = integral + error * dt

                    target_angular_vel = error * Kp + Kd * derivative + Ki * integral

                    preError = error

                    print("turn left !!! //A_A//")
                elif (left == right):

                    target_linear_vel = 130 * Kl + 0.0005

                    integral = 0

                    print("perfect !!!")
                    preError = error

            key = getKey()

            if (key == '\x03'):
                break

            twist = Twist()

            # control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE/2.0))
            control_linear_vel = target_linear_vel
            twist.linear.x = control_linear_vel;
            twist.linear.y = 0.0;
            twist.linear.z = 0.0

            # control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
            control_angular_vel = target_angular_vel
            twist.angular.x = 0.0;
            twist.angular.y = 0.0;
            twist.angular.z = control_angular_vel

            pub.publish(twist)
            # time.sleep(dt)

            time.sleep(dt)

    except:
        print(e)

    finally:
        twist = Twist()
        twist.linear.x = 0.0;
        twist.linear.y = 0.0;
        twist.linear.z = 0.0
        twist.angular.x = 0.0;
        twist.angular.y = 0.0;
        twist.angular.z = 0.0
        pub.publish(twist)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
